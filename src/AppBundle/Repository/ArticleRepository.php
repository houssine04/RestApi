<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Article;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use JMS\DiExtraBundle\Annotation as DI;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository
{
    /**
     * @var EntityRepository
     */
    private $repository;

    /**
     * @var EntityManagerInterface
     */
    private $_em;

    /**
     * ArticleRepository constructor.
     * @param EntityManagerInterface $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->repository = $entityManager->getRepository(Article::class);
        $this->_em = $entityManager;
    }

    /**
     * @return array
     */
    public function findAll()
    {
        return $this->repository->findAll();
    }

    /**
     * @param $id
     * @return Article
     */
    public function find($id)
    {
        return $this->repository->find($id);
    }

    /**
     * @param $id
     * @return Article
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneById($id) {

        $qb = $this->repository->createQueryBuilder('a');
        $qb ->where('a.id = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();

    }

    /**
     * @param $idAuthor
     * @return array
     */
    public function getArticlesByAuthor($idAuthor)
    {
        $qb = $this->repository->createQueryBuilder('a');
        $qb ->select('a.id, a.title, a.content, t.fullname as auteur')
            ->leftJoin('a.author', 't')
            ->where('t.id = :idAuthor')
            ->setParameter('idAuthor', $idAuthor);

        return $qb->getQuery()->getResult();

    }

    /**
     * @param Article $article
     */
    public function saveArticle(Article $article)
    {
        $this->_em->persist($article);
        $this->_em->flush();
    }

    /**
     * @param Article $article
     */
    public function updateArticle(Article $article)
    {
        $this->_em->persist($article);
        $this->_em->flush();
    }

    /**
     * @param Article $article
     */
    public function removeArticle(Article $article)
    {
        $this->_em->remove($article);
        $this->_em->flush();
    }
}
